import{E as c,S}from"./TileInfoView-df04fc1f.js";import{f as h,_ as V,A as b}from"./SymbolProcessor-c04d916e.js";import"./index-888ef8d4.js";import"./cimAnalyzer-0b30ad0c.js";import"./TileClipper-ae6eca9e.js";import"./definitions-651279cb.js";import"./number-e491b09e.js";import"./BidiEngine-9a40f2f4.js";import"./diffUtils-43577d30.js";import"./Pipeline-0a3bd484.js";import"./QueryEngine-10c1400f.js";import"./normalizeUtils-c2fb91fb.js";import"./normalizeUtilsCommon-ff02416d.js";import"./WhereClause-bae43477.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-633d5bd5.js";import"./generateRendererUtils-393d0b69.js";import"./FieldsIndex-d94786ea.js";import"./StreamFeatureManager-c799818e.js";import"./quickselect-8d688dcf.js";import"./arcadeTimeUtils-135c43f4.js";import"./centroid-8e8cfa47.js";import"./ogcFeatureUtils-d4438f3a.js";import"./geojson-c0065959.js";import"./clientSideDefaults-2346edd6.js";import"./defaultsJSON-59981e75.js";import"./query-6a85d506.js";import"./pbfQueryUtils-08029bda.js";import"./pbf-8458507f.js";import"./queryZScale-0521af07.js";import"./Query-66deb263.js";import"./createConnection-0e192b7d.js";import"./geohashUtils-77d8429b.js";import"./tileUtils-9e5b497c.js";import"./TurboLine-18065464.js";import"./Rect-98da58d6.js";import"./GeometryUtils-0258f920.js";function u(e){var r;return e.type==="line-marker"?{type:"line-marker",color:(r=e.color)==null?void 0:r.toJSON(),placement:e.placement,style:e.style}:e.constructor.fromJSON(e.toJSON()).toJSON()}function y(e){return b(e)}function ne(e,r,t=!1){if(!e)return null;switch(e.type){case"simple-fill":case"picture-fill":return x(e,r,t);case"simple-marker":case"picture-marker":return g(e,r,t);case"simple-line":return K(e,r,t);case"text":return z(e,r,t);case"label":return d(e,r,t);case"cim":return{type:"cim",rendererKey:r.vvFlags,data:e.data,maxVVSize:r.maxVVSize};case"CIMSymbolReference":return{type:"cim",rendererKey:r.vvFlags,data:e,maxVVSize:r.maxVVSize};case"web-style":return{...u(e),type:"web-style",hash:e.hash(),rendererKey:r.vvFlags,maxVVSize:r.maxVVSize};default:throw new Error(`symbol not supported ${e.type}`)}}function d(e,r,t){const o=e.toJSON(),i=h(c.LABEL,{...r,placement:o.labelPlacement});return{materialKey:t?y(i):i,hash:e.hash(),...o,labelPlacement:o.labelPlacement}}function x(e,r,t){const o=h(c.FILL,r),i=t?y(o):o,m=e.clone(),a=m.outline,s=V(r.symbologyType);s||(m.outline=null);const p={materialKey:i,hash:m.hash(),...u(m)};if(s)return p;const l=[];if(l.push(p),a){const n=h(c.LINE,{...r,isOutline:!0}),f={materialKey:t?y(n):n,hash:a.hash(),...u(a)};l.push(f)}return{type:"composite-symbol",layers:l,hash:l.reduce((n,f)=>f.hash+n,"")}}function K(e,r,t){const o=V(r.symbologyType)?S.DEFAULT:r.symbologyType,i=h(c.LINE,{...r,symbologyType:o}),m=t?y(i):i,a=e.clone(),s=a.marker;a.marker=null;const p=[];if(p.push({materialKey:m,hash:a.hash(),...u(a)}),s){const l=h(c.MARKER,r),n=t?y(l):l;s.color=s.color??a.color,p.push({materialKey:n,hash:s.hash(),lineWidth:a.width,...u(s)})}return{type:"composite-symbol",layers:p,hash:p.reduce((l,n)=>n.hash+l,"")}}function g(e,r,t){const o=h(c.MARKER,r),i=t?y(o):o,m=u(e);return{materialKey:i,hash:e.hash(),...m,angle:e.angle,maxVVSize:r.maxVVSize}}function z(e,r,t){const o=h(c.TEXT,r),i=t?y(o):o,m=u(e);return{materialKey:i,hash:e.hash(),...m,angle:e.angle,maxVVSize:r.maxVVSize}}export{ne as createSymbolSchema};
