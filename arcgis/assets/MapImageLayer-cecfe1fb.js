import{eI as w,eK as $,dV as I,dW as O,dX as T,eJ as E,cU as R,d_ as M,d6 as b,cW as g,eR as j,eS as L,by as f,bl as P,cO as F,eT as J,aq as v,b7 as N,ai as a,aj as p,eU as S,ck as U,cc as q,e2 as k,al as A,ba as _,eV as V}from"./index-888ef8d4.js";import{i as W}from"./APIKeyMixin-1e2aef06.js";import{E as z,f as K,Y as B}from"./SublayersOwner-c0532ec2.js";import{l as C}from"./ArcGISService-b304da72.js";import{o as D}from"./CustomParametersMixin-67adffbb.js";import{a as G}from"./TemporalLayer-f95249bd.js";import{m as H}from"./ExportImageParameters-93197e27.js";import{e as x}from"./sublayerUtils-fd48eb53.js";import{e as X}from"./versionUtils-24768af9.js";import"./UniqueValueRenderer-3a3aef3d.js";import"./ColorStop-5dd24a85.js";import"./diffUtils-43577d30.js";import"./colorRamps-f58bc08e.js";import"./jsonUtils-4d6628d3.js";import"./DictionaryLoader-8f10c9aa.js";import"./FieldsIndex-d94786ea.js";import"./heatmapUtils-48a69b11.js";import"./sql-bb25550f.js";import"./QueryTask-4ee9abf2.js";import"./Query-66deb263.js";import"./executeForIds-a541175c.js";import"./query-6a85d506.js";import"./normalizeUtils-c2fb91fb.js";import"./normalizeUtilsCommon-ff02416d.js";import"./pbfQueryUtils-08029bda.js";import"./pbf-8458507f.js";import"./queryZScale-0521af07.js";import"./executeQueryJSON-59021ead.js";import"./FeatureSet-326674fa.js";import"./executeQueryPBF-123105d3.js";import"./FeatureType-7302997b.js";import"./FeatureTemplate-869c518a.js";import"./LabelClass-be5c1571.js";import"./defaults-ee7ede40.js";import"./defaultsJSON-59981e75.js";import"./labelingInfo-d8717546.js";import"./serviceCapabilitiesUtils-09498ee7.js";import"./AttachmentQuery-f885be8d.js";import"./popupUtils-508fd57e.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends w(G($(z(K(C(I(O(T(E(W(D(R(_))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}load(e){const s=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(M).then(()=>this._fetchService(s))),Promise.resolve(this)}readImageFormat(e,s){const l=s.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,s,l,t){var y;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((y=this.capabilities.exportMap)!=null&&y.supportsDynamicLayers)){const r=b(t.origin);if(r===g.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=x(o,c,g.SERVICE)}else if(r>g.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=x(o,c.sublayers,b(c.origin))}}const m=[],h={writeSublayerStructure:n,...t};let d=n;o.forEach(r=>{const c=r.write({},h);m.push(c),d=d||r.originOf("visible")==="user"}),m.some(r=>Object.keys(r).length>1)&&(s.layers=m),d&&(s.visibleLayers=o.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,s,l,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new H({layer:this,floors:t==null?void 0:t.floors,scale:j({extent:e,width:s})*o}),m=n.toJSON();n.destroy();const h=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},d=e&&e.spatialReference,y=d.wkid||JSON.stringify(d.toJSON());m.dpi*=o;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:s+","+l,...m,...h,...r}}async fetchImage(e,s,l,t){const{data:o}=await this._fetchImage("image",e,s,l,t);return o}async fetchImageBitmap(e,s,l,t){const{data:o,url:n}=await this._fetchImage("blob",e,s,l,t);return L(o,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const s={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,s),{extent:t,fullExtent:o,timeExtent:n}=l,m=t||o;return{fullExtent:m&&P.fromJSON(m),timeExtent:n&&F.fromJSON({start:n[0],end:n[1]})}}loadAll(){return J(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return X(this,e)}async _fetchImage(e,s,l,t,o){var h,d,y;const n={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(s,l,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((h=n.query)==null?void 0:h.dynamicLayers)!=null&&!((y=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await f(m,n);return{data:r,url:m}}catch(r){throw N(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:s,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=s,this.read(s,{origin:"service",url:this.parsedUrl})}};a([p({type:S})],i.prototype,"dateFieldsTimeReference",void 0),a([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),a([p()],i.prototype,"dpi",void 0),a([p()],i.prototype,"gdbVersion",void 0),a([p()],i.prototype,"imageFormat",void 0),a([U("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),a([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),a([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),a([p()],i.prototype,"imageTransparency",void 0),a([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),a([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),a([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),a([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),a([p({type:S})],i.prototype,"preferredTimeReference",void 0),a([p()],i.prototype,"sourceJSON",void 0),a([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),a([q("sublayers",{layers:{type:[B]},visibleLayers:{type:[V]}})],i.prototype,"writeSublayers",null),a([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),a([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),a([p(k)],i.prototype,"url",void 0),i=a([A("esri.layers.MapImageLayer")],i);const qe=i;export{qe as default};
